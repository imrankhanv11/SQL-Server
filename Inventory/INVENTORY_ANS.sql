--SELECT Statements 
--1.	Retrieve the list of products with their category names and prices above ₹500.
SELECT p.name AS Name, c.category_name
FROM Products P
INNER JOIN Categories c on c.category_id = p.category_id
where p.price > 500;

--2.	Show all purchases made by each supplier, including the product name and purchase date.
SELECT s.name AS SupplierName, p.name AS PoductName, PU.purchase_date
FROM Suppliers s
LEFT JOIN Purchases pu on pu.supplier_id = s.supplier_id
join Products p on p.product_id = pu.product_id;

--3.	List all customers who have given a product review along with the product name and their rating.
SELECT c.name AS CustomerName, p.name AS ProductName, cr.rating
FROM Customers C
INNER JOIN ProductReviews CR ON CR.customer_id = C.customer_id
INNER JOIN Products P ON P.product_id = CR.product_id;

--4.	Get the full contact information of users who handled sales.
SELECT U.USERNAME, U.FULL_NAME, U.CONTACT_INFO
FROM Sales S
JOIN Users U ON U.user_id = S.user_id;

--5.	Show the top 10 most recent inventory log entries including the product name, warehouse name, and 
SELECT TOP 10 IL.log_id, P.name, W.name, IL.action_date
FROM Inventory_Log IL
LEFT JOIN Products P ON P.product_id = IL.product_id
LEFT JOIN Warehouses W ON W.warehouse_id = IL.warehouse_id
ORDER BY IL.action_date DESC;

--Aggregate Functions (5)
--1.	Find the total sales amount generated by each user.
SELECT U.FULL_NAME, SUM(S.total_price) as TOTAL_AMOUNT
FROM Users U
INNER JOIN Sales S ON S.user_id = U.user_id
GROUP BY U.user_id, U.full_name;

--2.	Calculate the average price of products in each category.
SELECT C.category_name, AVG(P.PRICE) as AVG_PRICE 
FROM Categories C
INNER JOIN Products P ON P.category_id = C.category_id
GROUP BY c.category_id, c.category_name;

--3.	Find the total quantity of each product purchased from suppliers.
SELECT S.NAME AS SupplierName,P.product_id  ,SUM(p.Quantity) AS TotalQuanity
FROM Suppliers S 
LEFT JOIN Purchases P ON S.supplier_id = P.supplier_id
GROUP BY S.name, P.product_id;

--4.	Get the maximum rating given in product reviews for each product.
SELECT P.NAME AS PRODUCT_NAME, MAX(PR.RATING) AS HIGHESTRATING
FROM Products P
LEFT JOIN ProductReviews PR ON PR.product_id = P.product_id
GROUP BY P.product_id, P.name;

--5.	Count how many actions of type 'IN' and 'OUT' were done in the Inventory_Log.
SELECT action, count(*) AS actionvalues
from Inventory_Log
GROUP BY action;

--GROUP BY + HAVING (5)
--1.	Show the suppliers who supplied more than 5 distinct products.
SELECT 
    S.name AS SupplierName,
    COUNT(DISTINCT PD.ProuductID) AS DistinctProductsSupplied
FROM 
    Suppliers S
JOIN 
    Purchases P ON S.supplier_id = P.supplier_id
JOIN 
    PurchaseDetails PD ON P.Purchase_ID = PD.PurchaseID
GROUP BY 
    S.name
HAVING 
    COUNT(DISTINCT PD.ProuductID) > 5;

--2.	Get each product's total quantity purchased where the total quantity is more than 100 units.
SELECT 
    PD.ProuductID AS product_id,
    PR.name AS ProductName,
    SUM(PD.Quantity) AS TotalQuantity
FROM 
    PurchaseDetails PD
JOIN 
    Products PR ON PD.ProuductID = PR.product_id
GROUP BY 
    PD.ProuductID, PR.name
HAVING 
    SUM(PD.Quantity) > 100;

--3.	Show categories with an average product price above ₹1000.
SELECT c.category_name, AVG(P.PRICE) AS AVG_PRICE
FROM Categories C
JOIN Products P ON P.category_id = C.category_id
GROUP BY C.category_id, C.category_name
HAVING AVG(P.PRICE) > 1000;

--4.	List users who performed more than 10 purchases.
SELECT U.FULL_NAME, COUNT(*) as OPERATIONS
FROM Users U 
INNER JOIN Sales S ON S.user_id= U.user_id
GROUP BY U.user_id, U.full_name
HAVING COUNT(*) > 1;

--5.	Find customers who wrote more than 2 reviews and gave an average rating below 3.
SELECT C.NAME
FROM Customers C
INNER JOIN ProductReviews PR ON PR.customer_id = C.customer_id
GROUP BY C.customer_id, C.name
HAVING COUNT(*) > 2 AND AVG(PR.RATING) < 3;

--JOINS (INNER, LEFT, RIGHT, FULL) (5)
--1.	List all products along with their current stock from all warehouses (even if stock is zero).
SELECT P.name AS PROUDCTNAME, SUM(PWS.QUANTITY_IN_STOCK) AS QUANTITY
FROM Products P 
LEFT JOIN ProductWarehouseStock PWS ON PWS.product_id = P.product_id
GROUP BY P.product_id, P.name;

--2.	Show sales details along with customer name and product name.
SELECT C.name as customerName, P.NAME AS PROUDUCTNAME, SD.QUANTITY 
FROM Customers C 
JOIN Sales S ON S.customer_id = C.customer_id
JOIN SalesDetails SD ON SD.sale_id = S.sale_id
JOIN Products P ON P.product_id =SD.product_id;

--3.	Get all suppliers and the total cost of purchases from them (even if no purchases).
SELECT s.name, sum(p.total_cost) as total
FROM Suppliers S
LEFT JOIN Purchases P ON P.supplier_id = S.supplier_id
GROUP BY S.supplier_id, S.name;

--4.	Find users and their roles, showing all users even if they don’t have roles assigned.
SELECT U.full_name, R.role_name
from Users u 
left join Roles r on r.role_id = u.role_id;

--5.	List all products and include purchase details if available (use full outer join logic).
SELECT P.NAME, PU.SUPPLIER_ID, PU.QUANTITY,  PU.purchase_date
FROM Products P
FULL JOIN Purchases PU ON PU.product_id = P.product_id;

--Subqueries (Scalar, Correlated, Nested, IN, EXISTS) (6)
--1.	List all products whose price is above the average product price.
SELECT p.name, P.price
FROM Products P
WHERE P.price > ( SELECT AVG(PRICE) FROM Products );

WITH AvgPriceCTE AS (
    SELECT AVG(price) AS avg_price FROM Products
)
SELECT 
    P.name, P.price
FROM 
    Products P, AvgPriceCTE
WHERE 
    P.price > AvgPriceCTE.avg_price;

--2.	Show all customers who haven’t made any sales.
SELECT C.NAME 
FROM Customers C
WHERE C.customer_id NOT IN ( SELECT customer_id FROM Sales );
--
SELECT name 
FROM Customers C
LEFT JOIN Sales S ON S.customer_id = C.customer_id
WHERE S.sale_id IS NULL;
--
WITH SALESSS AS (
	SELECT customer_id FROM Sales
)
SELECT 
    C.name
FROM 
    Customers C
WHERE 
    C.customer_id NOT IN (SELECT customer_id FROM SALESSS);

--3.	Get the name of the product(s) with the highest stock quantity across all warehouses.
SELECT TOP 1 WITH TIES 
    P.name AS ProductName,
    SUM(PWS.quantity_in_stock) AS TotalStock
FROM 
    Products P
JOIN 
    ProductWarehouseStock PWS ON P.product_id = PWS.product_id
GROUP BY 
    P.product_id, P.name
ORDER BY 
    SUM(PWS.quantity_in_stock) DESC;

--4.	List all purchases where the price is greater than the average purchase price for that product.
SELECT 
    PD.PurchaseDetailsID,
    PD.PurchaseID,
    PD.ProuductID,
    PD.Price,
    PD.Quantity
FROM 
    PurchaseDetails PD
WHERE 
    PD.Price > (
        SELECT 
            AVG(PD2.Price)
        FROM 
            PurchaseDetails PD2
        WHERE 
            PD2.ProuductID = PD.ProuductID
);

--5.	Find all warehouses that don’t contain a particular product (say Product_ID = 101).
SELECT warehouse_id
FROM Warehouses W
WHERE NOT EXISTS (
    SELECT 1
    FROM ProductWarehouseStock PWS
    WHERE PWS.warehouse_id = W.warehouse_id
      AND PWS.product_id = 101
);
---------------
SELECT warehouse_id
FROM Warehouses
WHERE warehouse_id NOT IN (
    SELECT warehouse_id
    FROM ProductWarehouseStock
    WHERE product_id = 101
);

--6.	List suppliers who have never been paid (using NOT EXISTS with SupplierPayments).
SELECT S.supplier_id, S.name
FROM Suppliers S
WHERE NOT EXISTS (
    SELECT 1
    FROM Purchases P
    JOIN SupplierPayments SP ON SP.purchase_id = P.purchase_id
    WHERE P.supplier_id = S.supplier_id
);

--Stored Procedures (5)
--1.	Create a procedure to insert a new product.
CREATE OR ALTER PROCEDURE sp_newProduct
	@name varchar(30),
	@categoryID INT,
	@price DECIMAL(12,4),
	@ID INT OUTPUT
AS
BEGIN
	BEGIN TRY
		IF NOT EXISTS ( SELECT 1 FROM Categories WHERE category_id = @categoryID)
		BEGIN
			RAISERROR('CATEGRORY NOT FOUND',16,1);
			RETURN;
		END

		INSERT INTO Products ( name, category_id, price )
		VALUES (@name, @categoryID, @price)
		SET @ID = SCOPE_IDENTITY();
	END TRY

	 BEGIN CATCH
        DECLARE @ERR_MESSAGE VARCHAR(400), @ERR_SEVERITY INT, @ERR_STATE INT;

        SELECT 
            @ERR_MESSAGE = ERROR_MESSAGE(),
            @ERR_SEVERITY = ERROR_SEVERITY(),
            @ERR_STATE = ERROR_STATE();

        RAISERROR(@ERR_MESSAGE, @ERR_SEVERITY, @ERR_STATE);
    END CATCH
END

DECLARE @NEWIDVALUE INT
EXEC sp_newProduct 'TEST',1,25.02, @NEWIDVALUE OUTPUT;

SELECT @NEWIDVALUE AS VALUE;

--2.	Create a procedure to fetch SALES details by SALE ID.
ALTER PROCEDURE sp_salesDetais
	@saleId INT
AS
BEGIN
	BEGIN TRY
		IF NOT EXISTS ( SELECT 1 FROM Sales WHERE sale_id = @saleId )
		BEGIN
			RAISERROR('SALE ID NOT FOUND',16,1);
			RETURN;
		END

		SELECT product_id, quantity, price 
		FROM SalesDetails
		WHERE sale_id = @saleId;
	END TRY

	 BEGIN CATCH
        DECLARE @ERR_MESSAGE VARCHAR(400), @ERR_SEVERITY INT, @ERR_STATE INT;

        SELECT 
            @ERR_MESSAGE = ERROR_MESSAGE(),
            @ERR_SEVERITY = ERROR_SEVERITY(),
            @ERR_STATE = ERROR_STATE();

        RAISERROR(@ERR_MESSAGE, @ERR_SEVERITY, @ERR_STATE);
    END CATCH
END

EXEC sp_salesDetais 'ab';

--3.	Write a procedure to update the product price.
CREATE OR ALTER PROCEDURE sp_updateProductPrice
	@prouductId INT,
	@newprice DECIMAL(12,4)
AS
BEGIN
	BEGIN TRY
		IF NOT EXISTS ( SELECT 1 FROM Products WHERE product_id = @prouductId )
		BEGIN
			RAISERROR('PRODUCT ID IS NOT FOUND', 16, 1);
			RETURN;
		END

		IF @newprice <= 0 
		BEGIN
			RAISERROR('PRICE CANNOT BE ZERO OR NEGATIVE',16,1);
			RETURN;
		END

		UPDATE Products
		SET price = @newprice
		WHERE product_id= @prouductId
	END TRY

	BEGIN CATCH
		DECLARE @ERR_MESSAGE VARCHAR(400), @ERR_SEVERITY INT, @ERR_STATE INT;

        SELECT 
            @ERR_MESSAGE = ERROR_MESSAGE(),
            @ERR_SEVERITY = ERROR_SEVERITY(),
            @ERR_STATE = ERROR_STATE();

        RAISERROR(@ERR_MESSAGE, @ERR_SEVERITY, @ERR_STATE);
	END CATCH
END

--4.	Write a procedure to delete a review by customer and product.
CREATE PROCEDURE sp_deletereview
	@customerid INT,
	@productId INT
AS
BEGIN
	BEGIN TRY
		 IF NOT EXISTS ( SELECT 1 FROM ProductReviews WHERE customer_id = @customerid AND product_id = @productId )
		 BEGIN
			RAISERROR('PRODUCT OR CUSTOMER ID NOT FOUND',16,1);
			RETURN;
		 END

		 DELETE
		 FROM ProductReviews
		 WHERE customer_id =@customerid AND product_id =@productId
	END TRY

	BEGIN CATCH
		DECLARE @MESSAGE VARCHAR(200), @SEVERITY INT, @STATE INT;
        SELECT 
            @MESSAGE = ERROR_MESSAGE(),
            @SEVERITY = ERROR_SEVERITY(),
            @STATE = ERROR_STATE();

        RAISERROR(@MESSAGE, @SEVERITY, @STATE);
	END CATCH
END

--Functions (Scalar & Table-Valued) (5)
--1.	Create a function to calculate discount price (say 10% off) for any product.
CREATE OR ALTER FUNCTION fn_discount(
    @price DECIMAL(12,4)
)
RETURNS DECIMAL(12,4)
AS
BEGIN
    DECLARE @discountPrice DECIMAL(12,4);
 
    SET @discountPrice = @price - (@price * 0.10);

    RETURN @discountPrice;
END;

SELECT NAME, price, dbo.fn_discount(price) as discount
from Products;

--2.	Create a function that returns the total stock of a product across all warehouses.
CREATE or alter FUNCTION fn_stockofprouduct ( @productid INT )
RETURNS TABLE
AS
RETURN
	SELECT p.name as ProductName, SUM(pws.quantity_in_stock) AS TotalQuantity
	FROM Products P
	LEFT JOIN ProductWarehouseStock PWS ON PWS.product_id = P.product_id
	where p.product_id = @productid
	GROUP BY P.product_id,P.name;

SELECT * FROM dbo.fn_stockofprouduct(1);

--3.	Write a function to return average rating of a product.
CREATE OR ALTER FUNCTION dbo.fn_avgrating (@productId INT)
RETURNS DECIMAL(12,4)
AS
BEGIN
    DECLARE @avgRating DECIMAL(12,4);

    SELECT @avgRating = AVG(CAST(rating AS DECIMAL(12,4)))
    FROM ProductReviews
    WHERE product_id = @productId;

    RETURN ISNULL(@avgRating, 0); 
END;

--4.	Create a table-valued function that lists all purchases of a given supplier.
CREATE FUNCTION fn_supplierpurchase ( @supplierId INT )
RETURNS TABLE
AS
RETURN
	SELECT product_id, quantity, purchase_id, total_cost
	FROM Purchases
	WHERE supplier_id =@supplierId

SELECT * FROM dbo.fn_supplierpurchase(2);

--5.	Write a scalar function that returns the full name and contact of a user by user ID.
CREATE FUNCTION dbo.fn_userdetails ( @userId INT )
RETURNS TABLE
AS
RETURN
	SELECT full_name, contact_info
	FROM Users
	WHERE USER_ID = @userId


SELECT * FROM DBO.fn_userdetails(2);

--Triggers 
--1.	Create a trigger that logs inventory changes whenever a row is inserted into Purchases.
CREATE OR ALTER TRIGGER trg_purchaselog
ON Purchases
AFTER INSERT
AS
BEGIN
    INSERT INTO Inventory_Log (product_id, action, quantity, action_date, user_id)
    SELECT 
        pd.product_id,
        'purchase',
        pd.quantity,
        GETDATE(),                
        i.user_id
    FROM inserted i
    JOIN Purchases pd ON pd.purchase_id = i.purchase_id;
END;

--2.	Write a trigger to prevent deleting products that are used in sales or purchases.
CREATE TRIGGER trg_preventdeleteproduct
ON Products
INSTEAD OF DELETE
AS
BEGIN
	IF EXISTS (SELECT 1 FROM SalesDetails S JOIN deleted d ON D.product_id = S.product_id )
	BEGIN
		RAISERROR('CANNOT DELETE',16,1);
		RETURN
	END
	DELETE 
	FROM Products
	WHERE product_id IN ( SELECT product_id FROM deleted )
END

--4.	Trigger to ensure review rating is between 1 and 5.
CREATE OR ALTER TRIGGER trg_rating
ON ProductReviews
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM inserted WHERE rating < 1 OR rating > 5)
    BEGIN
        RAISERROR('Rating must be between 1 and 5.', 16, 1);
        RETURN;
    END

    INSERT INTO ProductReviews (customer_id, product_id, rating, comments, review_date)
    SELECT customer_id, product_id, rating, comments, review_date
    FROM inserted;
END;

--Views (5)
--1.	Create a view to display product details with category name and total stock.
CREATE VIEW  vw_prouductCategory
AS
SELECT P.name AS ProuductName, c.category_id as CategoryName
FROM Products P
JOIN Categories C ON P.category_id = C.category_id

select * from vw_prouductCategory;

--2.	Create a view to show all purchases with supplier and user information.
CREATE VIEW vw_purchasesupplieruser
AS
SELECT P.purchase_id, P.purchase_date, S.name, U.full_name
FROM Purchases P
JOIN Suppliers S ON S.supplier_id = P.supplier_id
JOIN Users U ON U.user_id = P.user_id;

SELECT * FROM vw_purchasesupplieruser

--3.	View that shows review summary per product (avg rating, total reviews).
CREATE VIEW vw_reviewsummary
AS
SELECT P.name, ( SELECT AVG(RATING) FROM ProductReviews WHERE product_id =P.product_id GROUP BY product_id ) AS AVGRATING, 
			   ( SELECT COUNT(*) FROM ProductReviews WHERE product_id = P.product_id GROUP BY product_id ) AS TOTALRATING
FROM  ProductReviews PR
JOIN Products P ON P.product_id = PR.product_id

CREATE OR ALTER VIEW vw_reviewsummary2
AS
SELECT 
    P.product_id,
    P.name AS ProductName,
    AVG(PR.rating) AS AvgRating,
    COUNT(PR.review_id) AS TotalReviews
FROM 
    Products P
LEFT JOIN 
    ProductReviews PR ON PR.product_id = P.product_id
GROUP BY 
    P.product_id, P.name;

--4.	View to show all payments with supplier name and payment status.
CREATE VIEW vw_supplierpaymentstatus
AS
SELECT S.name, P.purchase_id, SP.status
FROM Suppliers S
JOIN Purchases P ON P.supplier_id = S.supplier_id 
JOIN SupplierPayments SP ON SP.purchase_id = P.purchase_id

SELECT * FROM vw_supplierpaymentstatus

--5.	View that combines inventory log with product and warehouse names.
CREATE VIEW vw_inventoy
AS
SELECT IL.log_id,IL.action, IL.product_id, IL.quantity, IL.user_id, W.name
FROM Inventory_Log IL
JOIN Warehouses W ON W.warehouse_id = IL.warehouse_id;

SELECT * FROM vw_inventoy;

--Indexes (5)
--1.	Create a non-clustered index on Products(Name).
CREATE NONCLUSTERED INDEX ix_products_name
ON Products(name);

--2.	Create a unique index on Users(Username).
CREATE UNIQUE NONCLUSTERED INDEX ix_users_username
ON Users(username);

--3.	Create an index on Inventory_Log(action_date) to speed up reporting.
CREATE NONCLUSTERED INDEX ix_inventory_log
ON Inventory_log(action_date);

--4.	Index the ProductWarehouseStock(product_id, warehouse_id) for faster stock queries.
CREATE NONCLUSTERED INDEX ix_pws_pid_wid
ON ProductWarehouseStock(product_id, warehouse_id);

--5.	Add a filtered index on ProductReviews(rating) where rating < 3.
CREATE NONCLUSTERED INDEX ix_productreviews_rating_3
ON ProductReviews(rating)
WHERE rating < 3;

--Dates
--•List all purchases made in the current month.
SELECT *
FROM Purchases
WHERE MONTH(purchase_date) = DATEPART(MONTH, GETDATE());

--•Find the total number of sales made each day in the last 7 days.
SELECT sale_date, COUNT(*) AS TOTAL 
FROM Sales
WHERE sale_date > DATEADD(DAY,-7,GETDATE())
GROUP BY sale_date

SELECT 
    CAST(sale_date AS DATE) AS SaleDay, 
    COUNT(*) AS TotalSales
FROM Sales
WHERE sale_date >= CAST(DATEADD(DAY, -7, GETDATE()) AS DATE)
GROUP BY CAST(sale_date AS DATE)
ORDER BY SaleDay;

--•Show customers who made their first purchase in the last 30 days.
SELECT C.name
FROM Customers C
JOIN (
    SELECT customer_id, MIN(sale_date) AS FirstPurchaseDate
    FROM Sales
    GROUP BY customer_id
) S ON S.customer_id = C.customer_id
WHERE S.FirstPurchaseDate >= DATEADD(DAY, -30, GETDATE());

--•Get products that received at least one review in the past 3 months.
SELECT P.name
FROM ProductReviews PR
JOIN Products P ON P.product_id = PR.product_id
WHERE review_date >= DATEADD(DAY, -90, GETDATE());


--•Find the average purchase price per supplier for purchases made in the year 2024.
SELECT supplier_id, AVG(TOTAL_COST) AS AVGPRICE
FROM Purchases
WHERE YEAR(purchase_date) = 2024
GROUP BY supplier_id
